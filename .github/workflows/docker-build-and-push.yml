name: Create and publish a Docker image

on:
  push:
    branches: ["**"] # run for any commit or tag push on any branch
    tags-ignore: ["v**"] # reserve v* tags for releases

env:
  REGISTRY_IMAGE: novatecconsulting/opentelemetry-training

jobs:
  build:
    name: Build and publish docker images
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        # This matrix will execute the job 8 times, with each iteration building
        # and pushing a different Docker image. The images are:
        #
        # - ghcr.io/${{ github.repository }}-application:linux/amd64
        # - ghcr.io/${{ github.repository }}-application:linux/arm/v6
        # - ghcr.io/${{ github.repository }}-application:linux/arm/v7
        # - ghcr.io/${{ github.repository }}-application:linux/arm64
        # - ghcr.io/${{ github.repository }}-tutorial:linux/amd64
        # - ghcr.io/${{ github.repository }}-tutorial:linux/arm/v6
        # - ghcr.io/${{ github.repository }}-tutorial:linux/arm/v7
        # - ghcr.io/${{ github.repository }}-tutorial:linux/arm64
        #
        # The `include` section lists the different Dockerfiles to use for each
        # image. The `dockerfile` field specifies the path to the Dockerfile,
        # and the `image` field specifies the name of the image to build.
        # The `context` field specifies the directory containing the Dockerfile.
        platform:
          - linux/amd64
          # - linux/arm/v6
          # - linux/arm/v7
          - linux/arm64
        image:
          - ghcr.io/novatecconsulting/opentelemetry-training-application
          - ghcr.io/novatecconsulting/opentelemetry-training-tutorial
        include:
          - image: ghcr.io/novatecconsulting/opentelemetry-training-application
            dockerfile: .devcontainer/Dockerfile
            context: .devcontainer/
          - image: ghcr.io/novatecconsulting/opentelemetry-training-application
            dockerfile: tutorial/Dockerfile
            context: tutorial
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Prepare for ${{ matrix.image }} on ${{ matrix.platform }}
        run: |
          platform=${{ matrix.platform }}
          echo "PLATFORM_PAIR=${platform//\//-}" >> $GITHUB_ENV

      - name: Extract metadata (tags, labels) for Docker from ${{ matrix.image }}
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ matrix.image }}
          tags: |
            type=ref,event=branch
            type=ref,event=tag
            type=ref,event=pr
            type=raw,value=latest,enable=${{ github.ref == format('refs/heads/{0}', 'main') }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push by digest for ${{ matrix.image }}
        id: build
        uses: docker/build-push-action@v6
        with:
          context: ${{ matrix.context }}
          file: ${{ matrix.dockerfile }}
          platforms: ${{ matrix.platform }}
          labels: ${{ steps.meta.outputs.labels }}
          outputs: type=image,name=${{ matrix.image }},push-by-digest=true,name-canonical=true,push=true
          cache-from: type=gha,scope=build-${{ env.PLATFORM_PAIR }}
          cache-to: type=gha,scope=build-${{ env.PLATFORM_PAIR }}

      - name: Export digest for ${{ matrix.image }}
        run: |
          mkdir -p /tmp/digests
          digest="${{ steps.build.outputs.digest }}"
          touch "/tmp/digests/${digest#sha256:}"

      - name: Upload digest
        uses: actions/upload-artifact@v4
        with:
          name: digests-${{ env.PLATFORM_PAIR }}
          path: /tmp/digests/*
          if-no-files-found: error
          retention-days: 1

  merge:
    runs-on: ubuntu-latest
    needs:
      - build
    strategy:
      fail-fast: false
      matrix:
        include:
          - image: ghcr.io/${{ github.repository }}-application
          - image: ghcr.io/${{ github.repository }}-tutorial
    steps:
      - name: Download digests
        uses: actions/download-artifact@v4
        with:
          path: /tmp/digests
          pattern: digests-*
          merge-multiple: true

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ matrix.image }}

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Create manifest list and push
        working-directory: /tmp/digests
        run: |
          docker buildx imagetools create $(jq -cr '.tags | map("-t " + .) | join(" ")' <<< "$DOCKER_METADATA_OUTPUT_JSON") \
            $(printf '${{ matrix.image }}@sha256:%s ' *)

      - name: Inspect image
        run: |
          docker buildx imagetools inspect ${{ matrix.image }}:${{ steps.meta.outputs.version }}

      # - name: Build and Push Digest
      #   id: build
      #   uses: docker/build-push-action@v5
      #   with:
      #     context: ${{ matrix.context }}
      #     file: ${{ matrix.dockerfile }}
      #     platforms: linux/amd64, linux/arm64
      #     tags: ${{ steps.meta.outputs.tags }}
      #     labels: ${{ steps.meta.outputs.labels }}
      #     push: true
